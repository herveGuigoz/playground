<?php

namespace App\Security;

use App\Services\StorageService;
use DateTimeImmutable;
use Firebase\JWT\JWK;
use GuzzleHttp\Client;
use Lcobucci\JWT\Configuration;
use Lcobucci\JWT\Signer\Ecdsa\Sha256;
use Lcobucci\JWT\Signer\Key\InMemory;

/**
 * Authenticate users and check the validity userâ€™s identity token.
 * https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/verifying_a_user
 */
class AppleAuthenticator
{
    /**
     * The Application bundle ID for Ios applications.
     * The Services ID for web and Android applications.
     * https://developer.apple.com/account/resources/identifiers/list/serviceId
     */
    private string $clientId = APPLE_CLIENT_ID;

    /**
     * Team ID for the Apple Developer Account.
     * Available on top right corner of the developers page.
     */
    private string $teamId = APPLE_TEAM_ID;

    /**
     * The identifier for Sign in with Apple key.
     * https://developer.apple.com/account/resources/authkeys/list
     */
    private string $keyId = APPLE_KEY_ID;

    private StorageService $storage;

    private Client $httpClient;

    public function __construct(string $platform)
    {
        if ($platform !== 'ios') {
            $this->clientId = APPLE_SERVICE_ID;
        }

        $this->storage = new StorageService();
        $this->httpClient = new Client();
    }

    /**
     * Retrieve user's identity information from Apple.
     */
    public function authenticate(string $token): array
    {
        $accessToken = $this->getAccessToken($token);

        return [
            'id' => $accessToken->getUserId(),
            'email' => $accessToken->getEmail(),
        ];
    }

    /**
     * Get the access token from the server based on the authorization code received from the application.
     * The code is single use only and will expire after 5 minutes.
     */
    public function getAccessToken(string $code): AppleAccessToken
    {
        $response = $this->httpClient->request('POST', 'https://appleid.apple.com/auth/token', [
            'form_params' => [
                'client_id' => $this->clientId,
                'client_secret' => $this->getClientSecret(),
                'code' => $code,
                'grant_type' => 'authorization_code',
                'redirect_uri' => OAUTH_REDIRECT_URI, // optional and for native apps
            ]
        ]);

        return new AppleAccessToken(
            $this->fetchJwkSet(),
            json_decode((string) $response->getBody(), true)
        );
    }

    /**
     * Create a JWT token to be used as the client secret.
     */
    private function getClientSecret(): string
    {
        $privateKey = $this->storage->read('AuthKey_K8DHCMGXHZ.p8');

        $configuration = Configuration::forSymmetricSigner(
            new Sha256(),
            InMemory::plainText($privateKey)
        );

        $now = new DateTimeImmutable();
        $expiresAt = $now->modify('+1 Hour');

        $token = $configuration->builder()
            ->issuedBy($this->teamId)
            ->permittedFor('https://appleid.apple.com')
            ->issuedAt($now)
            ->expiresAt($expiresAt)
            ->relatedTo($this->clientId)
            ->withHeader('alg', 'ES256')
            ->withHeader('kid', $this->keyId)
            ->getToken($configuration->signer(), $configuration->signingKey());

        return $token->toString();
    }

    /**
     * JWKSet used to validate the token generated by Apple.
     * https://developer.apple.com/documentation/sign_in_with_apple/jwkset/keys
     */
    private function fetchJwkSet(): array
    {
        $response = $this->httpClient->request('GET', 'https://appleid.apple.com/auth/keys');

        return JWK::parseKeySet(json_decode((string) $response->getBody(), true));
    }
}
